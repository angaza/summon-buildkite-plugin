#!/usr/bin/env bash

set -euo pipefail

echo '--- :smiling_imp: Summoning secrets into environment'

# accumulate arguments
args=()

if [[ -n "${BUILDKITE_PLUGIN_SUMMON_PROVIDER:-}" ]] ; then
  args+=("-p" "$BUILDKITE_PLUGIN_SUMMON_PROVIDER")
fi

if [[ -n "${BUILDKITE_PLUGIN_SUMMON_SECRETS_FILE:-}" ]] ; then
  args+=("-f" "$BUILDKITE_PLUGIN_SUMMON_SECRETS_FILE")
fi

if [[ -n "${BUILDKITE_PLUGIN_SUMMON_ENVIRONMENT:-}" ]] ; then
  args+=("-e" "$BUILDKITE_PLUGIN_SUMMON_ENVIRONMENT")
fi

# print, and then run, the full summon invocation; briefly ignoring errors so
# that we can capture its status
summon_with_args="summon ${args[@]}"
summon_cat_env="$summon_with_args cat @SUMMONENVFILE"
summon_status_path="$(mktemp -t summon-status.XXXXXX)"

echo "source <($summon_cat_env)"

set -a +e
source <($summon_cat_env; echo $? > "$summon_status_path")
set +a -e

# if summon did fail, re-run it outside of process substitution so that
# error output is visible (summon itself should never have side effects,
# and this approach is a lot simpler than trying to capture summon output
# only in the failure case)
if [ "$(cat $summon_status_path)" -ne 0 ]; then
  $summon_with_args echo
  false
fi
